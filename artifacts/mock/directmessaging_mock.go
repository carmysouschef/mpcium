// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/messaging/point2point.go
//
// Generated by this command:
//
//	mockgen -source pkg/messaging/point2point.go -destination /home/cody/Documents/work/personal/cryptonium/mpcium//artifacts/mock/directmessaging_mock.go -package mock
//
// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDirectMessaging is a mock of DirectMessaging interface.
type MockDirectMessaging struct {
	ctrl     *gomock.Controller
	recorder *MockDirectMessagingMockRecorder
}

// MockDirectMessagingMockRecorder is the mock recorder for MockDirectMessaging.
type MockDirectMessagingMockRecorder struct {
	mock *MockDirectMessaging
}

// NewMockDirectMessaging creates a new mock instance.
func NewMockDirectMessaging(ctrl *gomock.Controller) *MockDirectMessaging {
	mock := &MockDirectMessaging{ctrl: ctrl}
	mock.recorder = &MockDirectMessagingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDirectMessaging) EXPECT() *MockDirectMessagingMockRecorder {
	return m.recorder
}

// Listen mocks base method.
func (m *MockDirectMessaging) Listen(target string, handler func([]byte)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Listen", target, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// Listen indicates an expected call of Listen.
func (mr *MockDirectMessagingMockRecorder) Listen(target, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listen", reflect.TypeOf((*MockDirectMessaging)(nil).Listen), target, handler)
}

// Send mocks base method.
func (m *MockDirectMessaging) Send(target string, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", target, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockDirectMessagingMockRecorder) Send(target, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockDirectMessaging)(nil).Send), target, data)
}
